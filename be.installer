#!/usr/bin/env bash

#Generic installation script for BE::Shell themes and configs by Hombremaledicto.
#This script should not be executed as root:

if [ "$(id -u)" == "0" ]; then
  echo -e '\n\e[0;31mThis script must be executed as normal user!!!\nI will now exit.\e[0m' 
  exit 1
fi

#Checking which version of KDE DE we're running:

if [[ "$KDE_SESSION_VERSION" == "4" ]]; then
    pShell="plasma-desktop"
else
    pShell="plasmashell"
fi

#Setting distro indipendent paths

declare -r scriptDir="$( cd $( dirname "${BASH_SOURCE[0]}" ) && pwd )"
declare -r kdeDir="$(kde4-config --localprefix)share"
declare -r themesDir="$kdeDir/apps/be.shell/Themes"
declare -r configFile="$kdeDir/config/be.shell"

#Test functions

declare -f usage
declare -f choice
declare -f backup
declare -f confirm
declare -f kdeColors
declare -f extra
declare -f scriptDir
declare -f installer
declare -f isRunning
declare -f main


usage(){

echo -e "\n\e[34mA script to manage BE::Shell themes and configs\n\e[0m"
echo "Usage:"
echo "                   No options: interactive mode"
echo " -p, --preset      Install a preset, e.g. ./install -p Vertex"
echo " -b, --backup      Backup current config and theme directory."
echo " -h, --help        Shows this usage screen."
echo " -r, --reload      Quit from plasma if active or restart be.shell."
echo -e "\n\e[0;31mReport issues to https://github.com/Hombremaledicto/be.shell\e[0m"
    
}

choice(){
 
test=0
local -a array
 
for i in $scriptDir/be.shell.*; do
   array[${#array[*]}]="${i##*.}"
done

lenght=$((${#array[@]} -1))

while true; do
  echo -e "\n\e[32mAvailable themes:\n\e[0m"
 
  for i in "${!array[@]}"; do
    echo "$i)  ${array[$i]}"
  done
 
  echo -en "\nEnter a number from 0 to $lenght or q to exit: "
  read selection

#Thanks to https://github.com/izabera for the following section

  if [[ $selection =~ ^[0-9]+$  &&  10#$selection -le $lenght  ]]; then
      opt=${array[10#$selection]}
      break
  elif [[ "$selection" == "q" ]]; then
      echo "No theme selected, skipping"
      test=$((test + 1))
      break
  else
      clear;
  fi
done
 
chosenConf="$scriptDir/be.shell.$opt"
chosenTheme="$scriptDir/Themes/$opt"
 
}

backup(){

#Compressing the old setup, not as elegant as i wanted but works. 
#Feel free to improve it ;)

if [[ ! -d "$kdeDir/apps/be.shell/snapshots" ]]; then
   mkdir "$kdeDir/apps/be.shell/snapshots"
fi

local dateHour="$( date "+%Y%m%d%H%M%S" )"
local oldTheme="$( kreadconfig --file be.shell --group BE::Shell --key Theme )"
local archive="$kdeDir/apps/be.shell/snapshots/$oldTheme.$dateHour.tar"

tar -cf "$archive" "$0" -C "$kdeDir"/apps/be.shell/ "Themes/$oldTheme" "MainMenu.xml" -C "$HOME/.local/share/be.shell" "Menu" "Scripts" -C  "$kdeDir"/config be.shell --transform s/be.shell/be.shell.$oldTheme/ &> /dev/null 

echo -e "\nFiles stored in\n$archive\n"

}

confirm (){

read -r -p "${1} " response
case $response in
    [yY][eE][sS]|[yY]) 
       true
       ;;
    *)
       false
       ;;
esac
    
}

kdeColors(){ 

#unfortunately bash can't handle this 

python - <<END
try:
  from PyKDE4.kdeui import KGlobalSettings
  from PyKDE4.kdecore import KConfig, KConfigGroup
except ImportError:
  raise ImportError('In order to install KDE colorschemes automatically you need PyKDE4 installed')

scheme = KConfig('$endSchema')
kdeglobals = KConfig('kdeglobals')
for groupName in scheme.groupList():
            group = scheme.group(groupName)
            global_group = kdeglobals.group(groupName)
            for (k, v) in group.entryMap().items():
                global_group.writeEntry(k, v)
               
kdeglobals.sync()
kGlobalSettings = KGlobalSettings.self()
kGlobalSettings.emitChange(KGlobalSettings.PaletteChanged)
END

}

extra(){

#Installing goodies if provided

if [[ ! -d "$chosenTheme/extra" ]]; then
   return
fi

local myColors="$(find "$chosenTheme/extra" -name "*.colorscheme" )"
local cScheme="${myColors##*/}"
local konsoleVersion="$(konsole --version | awk 'NR == 2 {print $2}')"

if [[ -n "$myColors" ]]; then
  echo -e "\nSetting konsole colorscheme"
  if [[ "$konsoleVersion" == "Frameworks:" ]]; then
      cp "$myColors" "$HOME/.local/share/konsole"
      defProfile="$(kreadconfig5 --file konsolerc --group Desktop\ Entry --key DefaultProfile)"
      kwriteconfig5 --file "$HOME/.local/share/konsole/$defProfile" --group Appearance --key ColorScheme "${cScheme%.*}"
  elif [[ "$konsoleVersion" != "Frameworks:" ]]; then
      cp "$myColors" "$kdeDir/apps/konsole"
      defProfile="$(kreadconfig --file konsolerc --group Desktop\ Entry --key DefaultProfile)"
      kwriteconfig --file "$kdeDir/apps/konsole/$defProfile" --group Appearance --key ColorScheme "${cScheme%.*}"
  fi
  konsoleprofile colors="${cScheme%.*}"
fi

local kdeSchema="$(find "$chosenTheme/extra" -name "*.colors" )"
local schemaDesc="$(kreadconfig --file "$kdeSchema" --group General --key ColorScheme)"
local colorsDir="$kdeDir/apps/color-schemes"
local schemaName="${kdeSchema##*/}"
endSchema="$colorsDir/$schemaName"

if [[ -n "$kdeSchema" ]]; then
   echo -e "\nSetting KDE colorscheme"
   cp "$kdeSchema" "$colorsDir"
   kdeColors || echo -e "\n$schemaDesc is available in kcmshell4 colors"
fi

}

scriptDir(){

     confirm "Do you want to install the provided scripts? y/N ?" &&  install -CDm755 Scripts/* -t $HOME/.local/share/be.shell/Scripts
     confirm "Do you want to install the provided menus? y/N?" && install -CDm755 Menu/* -t $HOME/.local/share/be.shell/Menu

}

installer(){

#Might be this is a fresh installation

if [[ ! -d "$themesDir" ]]; then
     mkdir -p "$themesDir"
fi

if [[ ! -f "$configFile" ]]; then
     cp "$chosenConf" "$configFile"
elif [[  -f "$configFile" ]]; then
     echo " "
     confirm "Do you want to backup the existing theme and config? y/N:" && backup
     echo -e "\e[33mCopying the new config\e[0m"
     cp "$chosenConf" "$configFile"
fi

if [[ ! -d "$themesDir/$opt" ]]; then
     cp -r "$chosenTheme" "$themesDir" 
else
     echo " "
     if [[ "$chosenTheme" == "$themesDir/$opt" ]]; then
       echo "'$chosenTheme' and '$themesDir/$opt' are the same folder"
     else
       confirm "The folder $opt already exists in $themesDir. Continue anyway? y/N:" && rm -rf "$themesDir/$opt" &&  cp -r "$chosenTheme" "$themesDir"
    fi
fi

}

isRunning(){

if [[  -z $(pidof "$pShell") ]]; then
    if [[ ! -z $(pidof "be.shell") ]]; then
      echo " "
      confirm "I will now reload be.shell. Continue? [y/N]:" && be.shell --restart > /dev/null 2>&1
    else
      echo " "
      confirm "Starting be.shell. Continue? [y/N]:" && be.shell
    fi
else
     echo " "
     confirm "I will now stop Plasma and start be.shell. Continue? [y/N]:" && kquitapp "$pShell"; sleep 2; be.shell &> /dev/null
fi

}


main(){

if [ -z "$1" -o "$1" == "-p" -o "$1" == "--preset" ]; then
    if [ ! -z "$2" ]; then
      clear;
      opt="$2"
      chosenConf="$scriptDir/be.shell.$2" 
      chosenTheme="$scriptDir/Themes/$2"
     else
      clear
      sleep 0.5; choice
    fi
    if [[ "$test" -gt "0" ]]; then
      echo -e "\n\e[94mNothing to do :(\e[0m"; exit 1
     else
      sleep 0.5; installer    
    fi
    scriptDir
    sleep 0.5; isRunning
    sleep 0.5; extra 
    echo -e "\nSetting Wallpaper"
    sleep 2; find "$chosenTheme" -iname "wall*" -exec be.shell --setWallpaper {} \; &> /dev/null
    echo -e "\n\e[34mDone!\e[0m"
fi

case $1 in
    -h | --help) 
        usage
        ;;
    -b | --backup) 
        backup
        ;;
    '' | -p | --preset)
        sleep 0.5
        ;;
    -r | --reload)
        isRunning
        ;;
    -s | --scripts)
        scriptDir
        ;;
     *) 
        usage
        echo -e "\n\e[31mUnknown option '$1'\e[0m"
        exit 1
        ;;
esac

}

main "$@"